##############################################################################
#######  Euclid mag probe management macros set
##############################################################################

[gcode_macro Euclid_Config] 
description: Euclid parameters store
variable_docking_position:     [ 313, 351.5,  3 ]
variable_docking_slide_offset: -40
variable_safe_z:               30
variable_lift_speed:           400
variable_slide_speed:          800
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro Euclid_Config'] }"



##############################################################################
[gcode_macro Euclid_Status]
description: Euclid status store
variable_probe_attached:   None
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro Euclid_Status'] }"



##############################################################################
[gcode_macro Probe_Attach]
description: Attach Euclid probe to printhead
gcode:
    {% if printer["gcode_macro Euclid_Status"].probe_attached %}
        M118 Probe status already attached. Query probe to validate consistency...
        QUERY_PROBE
        _final_Probe_Attach
    {% else %}
        QUERY_PROBE
        _do_Probe_Attach
    {% endif %}

[gcode_macro _do_Probe_Attach]
gcode:
    G4 P1000
    {% set parms = printer["gcode_macro Euclid_Config"] %}
    {% set status = printer["gcode_macro Euclid_Status"] %}

    {% if not printer.probe.last_query %}
        { action_raise_error("QUERY_PROBE reported probe already attached!") }
    {% endif %}

    {% if printer.toolhead.homed_axes != "xyz" %}
        G28 
    {% endif %}   
    
    G90
    G0 Z{ parms.safe_z} F1000
    G0 X{ parms.docking_position[0] } Y{ parms.docking_position[1]} F6000
    G0 Z{ parms.docking_position[2] } F700
    G0 X{ parms.docking_position[0] + parms.docking_slide_offset } F{ parms.slide_speed }
    G0 Z{ parms.safe_z} F1000

    QUERY_PROBE
    _final_Probe_Attach

[gcode_macro _final_Probe_Attach]
gcode:
    G4 P1000
    {% if printer.probe.last_query %}
        { action_raise_error("Error attaching probe: not attached after job.") }
    {% else %}
        SET_GCODE_VARIABLE MACRO=Euclid_Status VARIABLE=probe_attached VALUE=True
        M118 Probe attached.
    {% endif %} 




##############################################################################
[gcode_macro Probe_Dock]
description: Dock Euclid probe to tray
gcode:
    {% if not printer["gcode_macro Euclid_Status"].probe_attached %}
        M118 Probe status already docked. Query probe to validate consistency...
        QUERY_PROBE
        _final_Probe_Dock
    {% else %}
        QUERY_PROBE
        _do_Probe_Dock
    {% endif %}

[gcode_macro _do_Probe_Dock]
gcode:
    G4 P1000
    {% set parms = printer["gcode_macro Euclid_Config"] %}
    {% set status = printer["gcode_macro Euclid_Status"] %}

    {% if printer.probe.last_query %}
        { action_raise_error("QUERY_PROBE reported probe not attached!") }
    {% endif %}
    
    G90
    G0 Z{ parms.safe_z} F1000
    G0 X{ parms.docking_position[0] + parms.docking_slide_offset } Y{ parms.docking_position[1] } F6000
    G0 Z{ parms.docking_position[2] } F800
    G0 X{ parms.docking_position[0] } F{ parms.slide_speed }
    G0 Z{ parms.safe_z} F{ parms.lift_speed}

    QUERY_PROBE
    _final_Probe_Dock

[gcode_macro _final_Probe_Dock]
gcode:
    G4 P1000
    {% if not printer.probe.last_query %}
        { action_raise_error("Error docking probe: still attached after job.") }
    {% else %}
        SET_GCODE_VARIABLE MACRO=Euclid_Status VARIABLE=probe_attached VALUE=False
        M118 Probe docked.
    {% endif %} 



##############################################################################
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_STANDARD
gcode:
    QUERY_PROBE
    _do_QUAD_GANTRY_LEVEL

[gcode_macro _do_QUAD_GANTRY_LEVEL]
gcode:
    G4 P1000
    {% set status = printer["gcode_macro Euclid_Status"] %}
    {% if status.probe_attached %}
        {%  if not printer.probe.last_query %}
            QUAD_GANTRY_LEVEL_STANDARD
            G28 Z
        {% else %}
            { action_raise_error("Error: probe status is attached but QUERY_PROBE reports detached!") }
        {% endif %}
    {% else %}
        {%  if printer.probe.last_query %}
            Probe_Attach
            QUAD_GANTRY_LEVEL_STANDARD
            G28 Z
            Probe_Dock
        {% else %}
            { action_raise_error("Error: probe status is docked but QUERY_PROBE reports attached!") }
        {% endif %}
    {% endif %}



##############################################################################
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_STANDARD
gcode:
    QUERY_PROBE
    _do_BED_MESH_CALIBRATE

[gcode_macro _do_BED_MESH_CALIBRATE]
gcode:
    G4 P1000
    {% set status = printer["gcode_macro Euclid_Status"] %}
    {% if status.probe_attached %}
        {%  if not printer.probe.last_query %}
            BED_MESH_CALIBRATE_STANDARD
        {% else %}
            { action_raise_error("Error: probe status is attached but QUERY_PROBE reports detached!") }
        {% endif %}
    {% else %}
        {%  if printer.probe.last_query %}
            Probe_Attach
            BED_MESH_CALIBRATE_STANDARD
            Probe_Dock
        {% else %}
            { action_raise_error("Error: probe status is docked but QUERY_PROBE reports attached!") }
        {% endif %}
    {% endif %}



##############################################################################
[gcode_macro FULL_Z_CALIBRATE]
description: Performs homing, QGL, bed mesh calibration and Z calibration.
gcode:
    PROBE_ATTACH
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE
    CALIBRATE_Z
